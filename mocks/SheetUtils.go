// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	sheets "google.golang.org/api/sheets/v4"
)

// SheetUtils is an autogenerated mock type for the SheetUtils type
type SheetUtils struct {
	mock.Mock
}

// CreateSheetsService provides a mock function with given fields: ctx, client
func (_m *SheetUtils) CreateSheetsService(ctx context.Context, client *http.Client) (*sheets.Service, error) {
	ret := _m.Called(ctx, client)

	if len(ret) == 0 {
		panic("no return value specified for CreateSheetsService")
	}

	var r0 *sheets.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Client) (*sheets.Service, error)); ok {
		return rf(ctx, client)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Client) *sheets.Service); ok {
		r0 = rf(ctx, client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Client) error); ok {
		r1 = rf(ctx, client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllContentFromGoogleSheets provides a mock function with given fields: document, client, actionID
func (_m *SheetUtils) GetAllContentFromGoogleSheets(document *string, client *http.Client, actionID *string) (*sheets.ValueRange, error) {
	ret := _m.Called(document, client, actionID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllContentFromGoogleSheets")
	}

	var r0 *sheets.ValueRange
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *http.Client, *string) (*sheets.ValueRange, error)); ok {
		return rf(document, client, actionID)
	}
	if rf, ok := ret.Get(0).(func(*string, *http.Client, *string) *sheets.ValueRange); ok {
		r0 = rf(document, client, actionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.ValueRange)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *http.Client, *string) error); ok {
		r1 = rf(document, client, actionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpreadsheet provides a mock function with given fields: ctx, srv, spreadsheetID
func (_m *SheetUtils) GetSpreadsheet(ctx context.Context, srv *sheets.Service, spreadsheetID string) (*sheets.Spreadsheet, error) {
	ret := _m.Called(ctx, srv, spreadsheetID)

	if len(ret) == 0 {
		panic("no return value specified for GetSpreadsheet")
	}

	var r0 *sheets.Spreadsheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sheets.Service, string) (*sheets.Spreadsheet, error)); ok {
		return rf(ctx, srv, spreadsheetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sheets.Service, string) *sheets.Spreadsheet); ok {
		r0 = rf(ctx, srv, spreadsheetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.Spreadsheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sheets.Service, string) error); ok {
		r1 = rf(ctx, srv, spreadsheetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpreadsheetID provides a mock function with given fields: documentURI
func (_m *SheetUtils) GetSpreadsheetID(documentURI *string) *string {
	ret := _m.Called(documentURI)

	if len(ret) == 0 {
		panic("no return value specified for GetSpreadsheetID")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func(*string) *string); ok {
		r0 = rf(documentURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// GetValuesFromSheet provides a mock function with given fields: _a0, sheetsService, spreadsheetID
func (_m *SheetUtils) GetValuesFromSheet(_a0 *sheets.Spreadsheet, sheetsService *sheets.Service, spreadsheetID *string) (*sheets.ValueRange, error) {
	ret := _m.Called(_a0, sheetsService, spreadsheetID)

	if len(ret) == 0 {
		panic("no return value specified for GetValuesFromSheet")
	}

	var r0 *sheets.ValueRange
	var r1 error
	if rf, ok := ret.Get(0).(func(*sheets.Spreadsheet, *sheets.Service, *string) (*sheets.ValueRange, error)); ok {
		return rf(_a0, sheetsService, spreadsheetID)
	}
	if rf, ok := ret.Get(0).(func(*sheets.Spreadsheet, *sheets.Service, *string) *sheets.ValueRange); ok {
		r0 = rf(_a0, sheetsService, spreadsheetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sheets.ValueRange)
		}
	}

	if rf, ok := ret.Get(1).(func(*sheets.Spreadsheet, *sheets.Service, *string) error); ok {
		r1 = rf(_a0, sheetsService, spreadsheetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSheetUtils creates a new instance of SheetUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSheetUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *SheetUtils {
	mock := &SheetUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
