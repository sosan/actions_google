// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "actions_google/pkg/domain/models"

	oauth2 "golang.org/x/oauth2"
)

// ActionsHTTPRepository is an autogenerated mock type for the ActionsHTTPRepository type
type ActionsHTTPRepository struct {
	mock.Mock
}

// GetDatabaseNotion provides a mock function with given fields: databaseID, secret
func (_m *ActionsHTTPRepository) GetDatabaseNotion(databaseID *string, secret *string) (*models.NotionDatabaseQueryResponse, error) {
	ret := _m.Called(databaseID, secret)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseNotion")
	}

	var r0 *models.NotionDatabaseQueryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*string, *string) (*models.NotionDatabaseQueryResponse, error)); ok {
		return rf(databaseID, secret)
	}
	if rf, ok := ret.Get(0).(func(*string, *string) *models.NotionDatabaseQueryResponse); ok {
		r0 = rf(databaseID, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.NotionDatabaseQueryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string) error); ok {
		r1 = rf(databaseID, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOAuthHTTPClient provides a mock function with given fields: ctx, config, token
func (_m *ActionsHTTPRepository) GetOAuthHTTPClient(ctx *context.Context, config *oauth2.Config, token *oauth2.Token) *http.Client {
	ret := _m.Called(ctx, config, token)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthHTTPClient")
	}

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func(*context.Context, *oauth2.Config, *oauth2.Token) *http.Client); ok {
		r0 = rf(ctx, config, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// NewActionsHTTPRepository creates a new instance of ActionsHTTPRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActionsHTTPRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActionsHTTPRepository {
	mock := &ActionsHTTPRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
