// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "actions_google/pkg/domain/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// TokenAuth is an autogenerated mock type for the TokenAuth type
type TokenAuth struct {
	mock.Mock
}

// GenerateTokenOAuth provides a mock function with given fields: _a0, _a1, _a2
func (_m *TokenAuth) GenerateTokenOAuth(_a0 *context.Context, _a1 *oauth2.Config, _a2 *models.RequestExchangeCredential) *oauth2.Token {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokenOAuth")
	}

	var r0 *oauth2.Token
	if rf, ok := ret.Get(0).(func(*context.Context, *oauth2.Config, *models.RequestExchangeCredential) *oauth2.Token); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	return r0
}

// GetConfigOAuth provides a mock function with given fields: _a0
func (_m *TokenAuth) GetConfigOAuth(_a0 models.DataCredential) *oauth2.Config {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigOAuth")
	}

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func(models.DataCredential) *oauth2.Config); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	return r0
}

// NewTokenAuth creates a new instance of TokenAuth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenAuth(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenAuth {
	mock := &TokenAuth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
