// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TransformNotion is an autogenerated mock type for the TransformNotion type
type TransformNotion struct {
	mock.Mock
}

// ProcessNotionData provides a mock function with given fields: results
func (_m *TransformNotion) ProcessNotionData(results *[]interface{}) (*[]string, *[][]string) {
	ret := _m.Called(results)

	if len(ret) == 0 {
		panic("no return value specified for ProcessNotionData")
	}

	var r0 *[]string
	var r1 *[][]string
	if rf, ok := ret.Get(0).(func(*[]interface{}) (*[]string, *[][]string)); ok {
		return rf(results)
	}
	if rf, ok := ret.Get(0).(func(*[]interface{}) *[]string); ok {
		r0 = rf(results)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*[]interface{}) *[][]string); ok {
		r1 = rf(results)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*[][]string)
		}
	}

	return r0, r1
}

// NewTransformNotion creates a new instance of TransformNotion. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransformNotion(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransformNotion {
	mock := &TransformNotion{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
