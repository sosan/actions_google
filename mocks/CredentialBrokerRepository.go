// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "actions_google/pkg/domain/models"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"
)

// CredentialBrokerRepository is an autogenerated mock type for the CredentialBrokerRepository type
type CredentialBrokerRepository struct {
	mock.Mock
}

// UpdateCredential provides a mock function with given fields: exchangeCredential, token
func (_m *CredentialBrokerRepository) UpdateCredential(exchangeCredential *models.RequestExchangeCredential, token *oauth2.Token) bool {
	ret := _m.Called(exchangeCredential, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredential")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*models.RequestExchangeCredential, *oauth2.Token) bool); ok {
		r0 = rf(exchangeCredential, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateCredentialFromGoogle provides a mock function with given fields: exchangeCredential, token
func (_m *CredentialBrokerRepository) UpdateCredentialFromGoogle(exchangeCredential *models.RequestExchangeCredential, token *oauth2.Token) *models.RequestExchangeCredential {
	ret := _m.Called(exchangeCredential, token)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCredentialFromGoogle")
	}

	var r0 *models.RequestExchangeCredential
	if rf, ok := ret.Get(0).(func(*models.RequestExchangeCredential, *oauth2.Token) *models.RequestExchangeCredential); ok {
		r0 = rf(exchangeCredential, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RequestExchangeCredential)
		}
	}

	return r0
}

// NewCredentialBrokerRepository creates a new instance of CredentialBrokerRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCredentialBrokerRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CredentialBrokerRepository {
	mock := &CredentialBrokerRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
