// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	redis "github.com/go-redis/redis/v8"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RedisClientInterface is an autogenerated mock type for the RedisClientInterface type
type RedisClientInterface struct {
	mock.Mock
}

// AcquireLock provides a mock function with given fields: key, value, expiration
func (_m *RedisClientInterface) AcquireLock(key string, value string, expiration time.Duration) (bool, error) {
	ret := _m.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for AcquireLock")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) (bool, error)); ok {
		return rf(key, value, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) bool); ok {
		r0 = rf(key, value, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(key, value, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteTransaction provides a mock function with given fields: ctx, keys, txFunc
func (_m *RedisClientInterface) ExecuteTransaction(ctx context.Context, keys []string, txFunc func(*redis.Tx) error) error {
	ret := _m.Called(ctx, keys, txFunc)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, func(*redis.Tx) error) error); ok {
		r0 = rf(ctx, keys, txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exists provides a mock function with given fields: key
func (_m *RedisClientInterface) Exists(key string) (int64, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *RedisClientInterface) Get(key string) (string, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HSetNX provides a mock function with given fields: key, field, value
func (_m *RedisClientInterface) HSetNX(key string, field *string, value string) (bool, error) {
	ret := _m.Called(key, field, value)

	if len(ret) == 0 {
		panic("no return value specified for HSetNX")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *string, string) (bool, error)); ok {
		return rf(key, field, value)
	}
	if rf, ok := ret.Get(0).(func(string, *string, string) bool); ok {
		r0 = rf(key, field, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, *string, string) error); ok {
		r1 = rf(key, field, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hdel provides a mock function with given fields: key, field
func (_m *RedisClientInterface) Hdel(key string, field string) (int64, error) {
	ret := _m.Called(key, field)

	if len(ret) == 0 {
		panic("no return value specified for Hdel")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int64, error)); ok {
		return rf(key, field)
	}
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(key, field)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hexists provides a mock function with given fields: key, field
func (_m *RedisClientInterface) Hexists(key string, field string) (bool, error) {
	ret := _m.Called(key, field)

	if len(ret) == 0 {
		panic("no return value specified for Hexists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(key, field)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(key, field)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, field)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hget provides a mock function with given fields: key, field
func (_m *RedisClientInterface) Hget(key string, field string) error {
	ret := _m.Called(key, field)

	if len(ret) == 0 {
		panic("no return value specified for Hget")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, field)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Hset provides a mock function with given fields: key, field, values
func (_m *RedisClientInterface) Hset(key string, field string, values interface{}) bool {
	ret := _m.Called(key, field, values)

	if len(ret) == 0 {
		panic("no return value specified for Hset")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, interface{}) bool); ok {
		r0 = rf(key, field, values)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveLock provides a mock function with given fields: key
func (_m *RedisClientInterface) RemoveLock(key string) (int64, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLock")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value
func (_m *RedisClientInterface) Set(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetEx provides a mock function with given fields: key, value, expiration
func (_m *RedisClientInterface) SetEx(key string, value interface{}, expiration time.Duration) (bool, error) {
	ret := _m.Called(key, value, expiration)

	if len(ret) == 0 {
		panic("no return value specified for SetEx")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) (bool, error)); ok {
		return rf(key, value, expiration)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, time.Duration) bool); ok {
		r0 = rf(key, value, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, time.Duration) error); ok {
		r1 = rf(key, value, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchAndExecute provides a mock function with given fields: ctx, keys, txFunc
func (_m *RedisClientInterface) WatchAndExecute(ctx context.Context, keys []string, txFunc func(*redis.Tx) error) error {
	ret := _m.Called(ctx, keys, txFunc)

	if len(ret) == 0 {
		panic("no return value specified for WatchAndExecute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, func(*redis.Tx) error) error); ok {
		r0 = rf(ctx, keys, txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WatchToken provides a mock function with given fields: data, key, expires
func (_m *RedisClientInterface) WatchToken(data string, key string, expires time.Duration) error {
	ret := _m.Called(data, key, expires)

	if len(ret) == 0 {
		panic("no return value specified for WatchToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(data, key, expires)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRedisClientInterface creates a new instance of RedisClientInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisClientInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisClientInterface {
	mock := &RedisClientInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
